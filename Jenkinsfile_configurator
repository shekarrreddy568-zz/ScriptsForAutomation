import groovy.io.FileType

def schema_registry
def zookeeper
def templates
def schemas_dir
def url

pipeline {
  agent none
  environment {
	  GIT_CREDS = credentials('github_creds_for_jenkins')
	  SSH_CREDS = credentials('ssh_creds_e960438adm')
    }
  options { disableConcurrentBuilds() }

  stages {

		stage('extract from previous stage') {
			agent { label 'linux' }
			when { environment name: 'BRANCH_NAME', value: 'FAIT' }
			steps{
				echo "branch : ${env.BRANCH_NAME}"
				sh 'cp /var/lib/jenkins/transports.py .'

				script {
					url = "${env.GIT_URL}".drop(8)
					echo "url: ${url}"
					templates = new File("${env.WORKSPACE}/templates").listFiles()
					echo "templates: ${templates}"
					schemas_dir = "\\\"${env.WORKSPACE}/schemas\\\""

					if ((env.BRANCH_NAME) == 'FAIT') {
						zookeeper = "\\\"kfkie0z111.linux.eden\\\""
						schema_registry = "\\\"https://kfkie0z313.linux.eden:8081\\\""
						}
					else if ((env.BRANCH_NAME) == 'ERGODEV') {
						zookeeper = "\\\"kfkie0y111.linux.eden\\\""
						schema_registry = "\\\"https://kfkie0y311.linux.eden:8081\\\""
						}

					echo "sr_url: ${schema_registry}"
					echo "schemas_dir: ${schemas_dir}"
					templates.each {
						sh """python -c "import transports; transports.readSchema(${schema_registry}, ${schemas_dir})" ${it.path}"""
					}
				
					echo "pushing the extracted schemas to the branch: ${env.BRANCH_NAME}"
					sh "git remote rm origin"
					sh "git add ${env.WORKSPACE}/schemas"
					sh "git remote add origin https://${GIT_CREDS_USR}:${GIT_CREDS_PSW}@${url}"                     
					sh "git commit -a -m 'added schema files' | true" 
//					sh "git push origin HEAD:${env.BRANCH_NAME}"
				}
				
			}
		}

		stage('transport to next stage') {
			agent { label 'linux' }
			when { environment name: 'BRANCH_NAME', value: "${env.TAG_NAME}" } 	
			steps{
				echo "TAG: ${env.TAG_NAME}"
				sh 'cp /var/lib/jenkins/transports.py .'

				script {
					templates = new File("${env.WORKSPACE}/templates").listFiles()
					echo "templates: ${templates}"
					schemas_dir = "\\\"${env.WORKSPACE}/schemas\\\""

					if ((env.TAG_NAME).startsWith('FAIT-v')) {
						zookeeper = "\\\"kfkie0z111.linux.eden\\\""
						schema_registry = "\\\"https://kfkie0z313.linux.eden:8081\\\""
						}
					else if ((env.TAG_NAME).startsWith('ERGODEV-v')) {
						zookeeper = "\\\"kfkie0y111.linux.eden\\\""
						schema_registry = "\\\"https://kfkie0y311.linux.eden:8081\\\""
						}
					echo "zookeeper: ${zookeeper}"
					echo "schema_registry: ${schema_registry}"

					templates.each {
						echo "template: ${it.path}"
						sh """
						python -c "import transports; transports.registerSchema(${schema_registry},${schemas_dir})" ${it.path}  
						"""
						sh """
						/mnt/cifsConfluentPlatform/kafka-configurator-0.10.1/bin/kafka-configurator \
						-f ${it.path} \
						--bootstrap-servers kfkie0y211.linux.eden:9094 \
						--properties ssl.keystore.location=/mnt/cifsConfluentPlatform/ssl_certs/clients/ITERGO_C1/client.ITERGO_C1.keystore.p12,ssl.key.password=CLIENT,ssl.keystore.password=CLIENT,ssl.truststore.location=/mnt/cifsConfluentPlatform/ssl_certs/clients/ITERGO_C1/client.ITERGO_C1.truststore.p12,ssl.truststore.password=CLIENT,security.protocol=SSL
						"""
					}
				}
				
			}
		}

    
  }
}



